"use strict";(self.webpackChunk_viotemplate_docs=self.webpackChunk_viotemplate_docs||[]).push([[466],{6461:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var a=n(7462),l=n(3366),o=(n(7294),n(3905)),i=(n(9055),["components"]),r={},s=void 0,u={unversionedId:"Contributing/Tutorial",id:"Contributing/Tutorial",title:"Tutorial",description:"Clone",source:"@site/docs/Contributing/Tutorial.mdx",sourceDirName:"Contributing",slug:"/Contributing/Tutorial",permalink:"/docs/Contributing/Tutorial",editUrl:"https://github.com/otaviotech/ts-monorepo/tree/main/packages/docs/docs/Contributing/Tutorial.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"System Architecture",permalink:"/docs/design-docs/system-architecture"},next:{title:"Tools",permalink:"/docs/Packages/server/tools"}},p=[{value:"Clone",id:"clone",children:[],level:2},{value:"Bootstrap packages",id:"bootstrap-packages",children:[],level:2},{value:"Commiting",id:"commiting",children:[{value:"Overview",id:"overview",children:[],level:3},{value:"Strategy",id:"strategy",children:[],level:3},{value:"Example (manual)",id:"example-manual",children:[],level:3},{value:"Example (commitzen)",id:"example-commitzen",children:[],level:3},{value:"TL;DR",id:"tldr",children:[],level:3}],level:2},{value:"Opening a PR",id:"opening-a-pr",children:[{value:"Review the checklist",id:"review-the-checklist",children:[],level:3},{value:"Targeting",id:"targeting",children:[],level:3},{value:"Follow the PR Template",id:"follow-the-pr-template",children:[],level:3}],level:2}],c={toc:p};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"clone"},"Clone"),(0,o.kt)("p",null,"First of all, clone the repository and install the root dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git clone git@github.com:otaviotech/ts-monorepo.git\n$ npm install\n")),(0,o.kt)("h2",{id:"bootstrap-packages"},"Bootstrap packages"),(0,o.kt)("p",null,"Now let Lerna take care of installing and linking the packages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm run bootstrap\n")),(0,o.kt)("h2",{id:"commiting"},"Commiting"),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The root project has a setup containing Commitzen and CommitLint."),(0,o.kt)("h3",{id:"strategy"},"Strategy"),(0,o.kt)("p",null,"You should use conventional commits strategy to commit."),(0,o.kt)("h3",{id:"example-manual"},"Example (manual)"),(0,o.kt)("p",null,"Let's say you've made some change to the ",(0,o.kt)("inlineCode",{parentName:"p"},"server")," package."),(0,o.kt)("p",null,"Your commit message should be like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git commit -m "feat(server): add a Stripe webhook to listen for invoice.paid events"\n')),(0,o.kt)("p",null,"If you need to create a long commit message, use commitzen."),(0,o.kt)("h3",{id:"example-commitzen"},"Example (commitzen)"),(0,o.kt)("p",null,"You can run the ",(0,o.kt)("inlineCode",{parentName:"p"},"commit")," script on the root package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm run commit\n")),(0,o.kt)("h3",{id:"tldr"},"TL;DR"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the conventional commits convention."),(0,o.kt)("li",{parentName:"ul"},"The scope of the commit should ",(0,o.kt)("em",{parentName:"li"},"ALWAYS")," be the package you've made changes to."),(0,o.kt)("li",{parentName:"ul"},"Remember to make useful commits.")),(0,o.kt)("h2",{id:"opening-a-pr"},"Opening a PR"),(0,o.kt)("h3",{id:"review-the-checklist"},"Review the checklist"),(0,o.kt)("p",null,"First of all(and don't skip this), go to the checklist of each package you worked on and ensure you followed all the steps."),(0,o.kt)("h3",{id:"targeting"},"Targeting"),(0,o.kt)("p",null,"Your feature pull requests should ALWAYS source and target the ",(0,o.kt)("inlineCode",{parentName:"p"},"develop")," branch. (see GitFlow)"),(0,o.kt)("h3",{id:"follow-the-pr-template"},"Follow the PR Template"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The TITLE")," should have the issue id and a very short explaination. It should also have a friendly message, because it will appear on the ",(0,o.kt)("inlineCode",{parentName:"p"},"CHANGELOG"),"."),(0,o.kt)("p",null,"E.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"[VT-2] Add social login with Google")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The BODY")," should have technical details about the change."),(0,o.kt)("p",null,"To make it easier for reviewers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Explain what is the goal of the PR"),(0,o.kt)("li",{parentName:"ul"},"Explain how it was before and after your changes"),(0,o.kt)("li",{parentName:"ul"},"Explain why you used some approach"),(0,o.kt)("li",{parentName:"ul"},"Explain What your change affects")),(0,o.kt)("p",null,"And the ",(0,o.kt)("strong",{parentName:"p"},"MOST IMPORTANT"),": review your own pull request before opening!\nSounds odd, but it's very helpful, give it a try."))}m.isMDXComponent=!0}}]);