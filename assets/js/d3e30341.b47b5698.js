"use strict";(self.webpackChunk_viotemplate_docs=self.webpackChunk_viotemplate_docs||[]).push([[466],{6461:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return s},default:function(){return p}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),l=(n(9055),["components"]),r={},c="Quick start",m={unversionedId:"Contributing/Tutorial",id:"Contributing/Tutorial",title:"Quick start",description:"Clone",source:"@site/docs/Contributing/Tutorial.mdx",sourceDirName:"Contributing",slug:"/Contributing/Tutorial",permalink:"/docs/Contributing/Tutorial",editUrl:"https://github.com/otaviotech/ts-monorepo/tree/main/packages/docs/docs/Contributing/Tutorial.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"System Architecture",permalink:"/docs/design-docs/system-architecture"},next:{title:"Tools",permalink:"/docs/Packages/server/tools"}},s=[{value:"Clone",id:"clone",children:[],level:2},{value:"Bootstrap packages",id:"bootstrap-packages",children:[],level:2},{value:"Commiting",id:"commiting",children:[{value:"Overview",id:"overview",children:[],level:3},{value:"Strategy",id:"strategy",children:[],level:3},{value:"Example (manual)",id:"example-manual",children:[],level:3},{value:"Example (commitzen)",id:"example-commitzen",children:[],level:3},{value:"TL;DR",id:"tldr",children:[],level:3}],level:2}],u={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick start"),(0,i.kt)("h2",{id:"clone"},"Clone"),(0,i.kt)("p",null,"First of all, clone the repository and install the root dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ git clone git@github.com:otaviotech/ts-monorepo.git\n$ npm install\n")),(0,i.kt)("h2",{id:"bootstrap-packages"},"Bootstrap packages"),(0,i.kt)("p",null,"Now let Lerna take care of installing and linking the packages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm run bootstrap\n")),(0,i.kt)("h2",{id:"commiting"},"Commiting"),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The root project has a setup containing Commitzen and CommitLint."),(0,i.kt)("h3",{id:"strategy"},"Strategy"),(0,i.kt)("p",null,"You should use conventional commits strategy to commit."),(0,i.kt)("h3",{id:"example-manual"},"Example (manual)"),(0,i.kt)("p",null,"Let's say you've made some change to the ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," package."),(0,i.kt)("p",null,"Your commit message should be like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ git commit -m "feat(server): add a Stripe webhook to listen for invoice.paid events"\n')),(0,i.kt)("p",null,"If you need to create a long commit message, use commitzen."),(0,i.kt)("h3",{id:"example-commitzen"},"Example (commitzen)"),(0,i.kt)("p",null,"You can run the ",(0,i.kt)("inlineCode",{parentName:"p"},"commit")," script on the root package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm run commit\n")),(0,i.kt)("h3",{id:"tldr"},"TL;DR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the conventional commits convention."),(0,i.kt)("li",{parentName:"ul"},"The scope of the commit should ",(0,i.kt)("em",{parentName:"li"},"ALWAYS")," be the package you've made changes to."),(0,i.kt)("li",{parentName:"ul"},"Remember to make useful commits.")))}p.isMDXComponent=!0}}]);